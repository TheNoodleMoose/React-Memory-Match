{"version":3,"sources":["assets/images sync /^/.*$","assets/images/spongebob_ascending.jpeg","assets/images/spongebob_crying.jpg","assets/images/spongebob_drifter.jpg","assets/images/spongebob_intelligencepants.jpg","assets/images/spongebob_longpants.jpg","assets/images/spongebob_minibob.jpg","assets/images/spongebob_mockbob.jpg","assets/images/spongebob_mustache.jpg","assets/images/spongebob_rainbow_meme.jpg","assets/images/spongebob_shocked.jpg","assets/images/spongebob_spongegar.jpg","assets/images/spongebob_waiting.png","components/Navbar.tsx","components/Jumbotron.tsx","components/Card.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["map","./spongebob_ascending.jpeg","./spongebob_crying.jpg","./spongebob_drifter.jpg","./spongebob_intelligencepants.jpg","./spongebob_longpants.jpg","./spongebob_minibob.jpg","./spongebob_mockbob.jpg","./spongebob_mustache.jpg","./spongebob_rainbow_meme.jpg","./spongebob_shocked.jpg","./spongebob_spongegar.jpg","./spongebob_waiting.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","Navbar","_ref","status","score","topScore","react_default","a","createElement","NavBar","NavbarContainer","NavbarItem","styled","h3","_templateObject","taggedTemplateLiteral","div","_templateObject2","_templateObject3","Jumbotron","JumbotronDiv","Jumbotron_templateObject","Card","card","handleClick","CardContainer","src","require","concat","background","onClick","img","Card_templateObject","App","_useState","useState","cards","spongebobs","_useState2","slicedToArray","gameState","setGameState","handleItemClick","array","i","length","j","Math","floor","random","shuffle","newArray","toConsumableArray","index","indexOf","objectSpread","clicked","newTopScore","components_Navbar","components_Jumbotron","CardGridContainer","CardGrid","components_Card","key","App_templateObject","App_templateObject2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.412bda7e.chunk.js","sourcesContent":["var map = {\n\t\"./spongebob_ascending.jpeg\": 31,\n\t\"./spongebob_crying.jpg\": 32,\n\t\"./spongebob_drifter.jpg\": 33,\n\t\"./spongebob_intelligencepants.jpg\": 34,\n\t\"./spongebob_longpants.jpg\": 35,\n\t\"./spongebob_minibob.jpg\": 36,\n\t\"./spongebob_mockbob.jpg\": 37,\n\t\"./spongebob_mustache.jpg\": 38,\n\t\"./spongebob_rainbow_meme.jpg\": 39,\n\t\"./spongebob_shocked.jpg\": 40,\n\t\"./spongebob_spongegar.jpg\": 41,\n\t\"./spongebob_waiting.png\": 42\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 30;","module.exports = __webpack_public_path__ + \"static/media/spongebob_ascending.25dda1e4.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_crying.31c3f347.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_drifter.56e41a65.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_intelligencepants.333890fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_longpants.014994a8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_minibob.67e73091.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_mockbob.6b18bd41.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_mustache.2fe759c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_rainbow_meme.f1766683.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_shocked.8ae45660.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_spongegar.2f4d6049.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spongebob_waiting.3af2dfbd.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface NavbarProps {\n  status: string;\n  score: number;\n  topScore: number;\n}\n\nconst Navbar: React.FC<NavbarProps> = ({\n  status,\n  score,\n  topScore\n}: NavbarProps) => {\n  return (\n    <NavBar>\n      <NavbarContainer>\n        <NavbarItem>Clicky Game</NavbarItem>\n        <NavbarItem>{status}</NavbarItem>\n        <NavbarItem>\n          Score: {score} | Top Score: {topScore}\n        </NavbarItem>\n      </NavbarContainer>\n    </NavBar>\n  );\n};\n\nexport default Navbar;\n\nconst NavbarItem = styled.h3`\n  color: white;\n  @media (max-width: 700px) {\n    font-size: 16px;\n  }\n`;\n\nconst NavbarContainer = styled.div`\n  box-shadow: 0px 6px 5px 0px rgba(0, 0, 0, 0.75);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  background-color: #282c34;\n  min-height: 60px;\n  color: white;\n  font-size: calc(10px + 2vmin);\n`;\n\nconst NavBar = styled.div`\n  width: 100%;\n  position: fixed;\n  text-align: center;\n  top: 0;\n  @media (max-width: 700px) {\n    height: 10px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Jumbotron: React.FC = () => {\n  return (\n    <JumbotronDiv>\n      <h1>Spongebob Memory Match!</h1>\n      <h3>\n        Click on the spongebobs to earn points, but be sure not to click the\n        same spongebob twice!\n      </h3>\n    </JumbotronDiv>\n  );\n};\n\nexport default Jumbotron;\n\nconst JumbotronDiv = styled.div`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background-color: #6580b4;\n  background-image: url(\"https://wallpapertag.com/wallpaper/full/f/d/a/379057-vertical-spongebob-background-2500x1600-computer.jpg\");\n  color: black;\n  height: 400px;\n  @media (max-width: 700px) {\n    margin-top: 20px;\n    height: 300px;\n    width: 100%;\n    font-size: 25px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport interface CardType {\n  id: number;\n  name: string;\n  background: string;\n  clicked: boolean;\n}\n\ninterface CardProps {\n  card: CardType;\n  handleClick: (card: CardType) => void;\n}\n\nconst Card: React.FC<CardProps> = ({ card, handleClick }: CardProps) => {\n  return (\n    <CardContainer\n      src={require(`../assets/images/${card.background}`)}\n      onClick={() => handleClick(card)}\n    />\n  );\n};\n\nexport default Card;\n\nconst CardContainer = styled.img`\n  margin: 0 10px;\n  width: 150px;\n  height: 150px;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  z-index: 100;\n  border-radius: 10px;\n`;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card, { CardType } from \"./components/Card\";\nimport spongebobs from \"./spongebobs.json\";\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState({\n    status: \"Click An Image To Begin\",\n    score: 0,\n    topScore: 0,\n    cards: spongebobs\n  });\n\n  const shuffle = (array: CardType[]) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  // This method is what checks if a card has be clicked and handles\n  // Which method to fire depending on what the user clicks\n  const handleItemClick = (card: CardType) => {\n    // Shuffle the cards array on click\n    shuffle(gameState.cards);\n\n    // Make a copy of cards array so we do not mutate the state directly\n    const newArray = [...gameState.cards];\n    // Define a variable that is the index of our card the user clicked on from\n    // Our copied array\n    const index = newArray.indexOf(card);\n\n    // Set that index to equal everything from the card the user clicked on\n    newArray[index] = { ...card };\n    // If that card has not been clicked on update it to clicked\n    if (newArray[index].clicked === false) {\n      newArray[index].clicked = true;\n      const newTopScore = gameState.topScore + 1;\n      // Check if current score + 1 is enough to win the game\n      // If not, update the game state accordingly\n      if (newTopScore < 12) {\n        setGameState({\n          score: score + 1,\n          topScore: newTopScore <= score + 1 ? newTopScore : gameState.topScore,\n          cards: newArray,\n          status: \"Correct Choice!\"\n        });\n      } else {\n        setGameState({\n          score: 0,\n          topScore: 0,\n          cards: spongebobs,\n          status: \"Congrats, you won! Click an image to begin again\"\n        });\n      }\n      // If card has already been clicked, set game state accordingly\n    } else if (newArray[index].clicked === true) {\n      setGameState({\n        status: \"Wrong Answer! Click An Image To Try Again!\",\n        cards: spongebobs,\n        score: 0,\n        topScore: gameState.topScore\n      });\n    }\n  };\n\n  const { score, topScore, status, cards } = gameState;\n\n  return (\n    <div>\n      {/* Pass in score, topScore, and status to Navbar */}\n      <Navbar score={score} topScore={topScore} status={status} />\n      <Jumbotron />\n      <CardGridContainer>\n        <CardGrid>\n          {/* For each card in our state cards create a Card component that is passed the card object */}\n          {cards.map((card) => (\n            <Card key={card.id} card={card} handleClick={handleItemClick} />\n          ))}\n        </CardGrid>\n      </CardGridContainer>\n    </div>\n  );\n};\n\nexport default App;\n\nconst CardGridContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst CardGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(4, 1fr);\n  grid-row-gap: 1rem;\n  @media (max-width: 700px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}