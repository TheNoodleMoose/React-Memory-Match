{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","NavBar","NavbarContainer","NavbarItem","status","score","topScore","styled","h3","_templateObject","div","_templateObject2","_templateObject3","Jumbotron","JumbotronDiv","Component","Jumbotron_templateObject","Card","console","log","card","background","CardContainer","style","backgroundImage","concat","onClick","handleClick","Card_templateObject","App","state","cards","spongebobs","shuffle","array","i","length","j","Math","floor","random","_ref","setGameStart","_this","setState","setInitialState","handleItemClick","newArray","Object","toConsumableArray","index","indexOf","objectSpread","clicked","addToScore","setTopScore","_this2","this","_this$state","components_Navbar","components_Jumbotron","CardGridContainer","CardGrid","map","components_Card","key","id","App_templateObject","App_templateObject2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e04289ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <NavBar>\r\n      <NavbarContainer>\r\n        <NavbarItem>Clicky Game</NavbarItem>\r\n        <NavbarItem>{props.status}</NavbarItem>\r\n        <NavbarItem>\r\n          Score: {props.score} | Top Score: {props.topScore}\r\n        </NavbarItem>\r\n      </NavbarContainer>\r\n    </NavBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\nconst NavbarItem = styled.h3`\r\n  color: white;\r\n  @media (max-width: 700px) {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst NavbarContainer = styled.div`\r\n  box-shadow: 0px 6px 5px 0px rgba(0, 0, 0, 0.75);\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  background-color: #282c34;\r\n  min-height: 60px;\r\n  color: white;\r\n  font-size: calc(10px + 2vmin);\r\n`;\r\n\r\nconst NavBar = styled.div`\r\n  width: 100%;\r\n  position: fixed;\r\n  text-align: center;\r\n  top: 0;\r\n  @media (max-width: 700px) {\r\n    height: 10px;\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    return (\r\n      <JumbotronDiv>\r\n        <h1>Spongebob Memory Match!</h1>\r\n        <h3>\r\n          Click on an the spongebobs to earn points, but be sure not to click\r\n          the same spongebob twice!\r\n        </h3>\r\n      </JumbotronDiv>\r\n    );\r\n  }\r\n}\r\nexport default Jumbotron;\r\n\r\nconst JumbotronDiv = styled.div`\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background-color: #6580b4;\r\n  background-image: url(\"https://wallpapertag.com/wallpaper/full/f/d/a/379057-vertical-spongebob-background-2500x1600-computer.jpg\");\r\n  color: black;\r\n  height: 400px;\r\n  @media (max-width: 700px) {\r\n    margin-top: 20px;\r\n    height: 300px;\r\n    width: 100%;\r\n    font-size: 25px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Card = props => {\r\n  console.log(props.card.background);\r\n  return (\r\n    <CardContainer\r\n      style={{ backgroundImage: `url(\"${props.card.background}\")` }}\r\n      onClick={() => props.handleClick(props.card)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\nconst CardContainer = styled.div`\r\n  margin: 0 10px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  z-index: 100;\r\n  border-radius: 10px;\r\n`;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport spongebobs from \"./spongebobs.json\";\n\nclass App extends Component {\n  state = {\n    status: \"Click An Image To Begin\",\n    score: 0,\n    topScore: 0,\n    cards: spongebobs\n  };\n\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  setGameStart = () => {\n    this.setState({\n      status: \"Click An Image To Begin\",\n      cards: spongebobs,\n      score: 0,\n      topScore: 0\n    });\n  };\n\n  setInitialState = () => {\n    this.setState({\n      status: \"Wrong Answer! Click An Image To Try Again!\",\n      cards: spongebobs,\n      score: 0\n    });\n  };\n  handleItemClick = props => {\n    this.shuffle(this.state.cards);\n\n    const newArray = [...this.state.cards];\n    const index = newArray.indexOf(props);\n\n    newArray[index] = { ...props };\n    if (newArray[index].clicked === false) {\n      newArray[index].clicked = true;\n      this.addToScore(this.state.score);\n      this.setTopScore();\n      this.setState({\n        cards: newArray,\n        status: \"Correct Choice!\"\n      });\n    } else if (newArray[index].clicked === true) {\n      console.log(\"I Have already been clicked\");\n      this.setInitialState();\n    }\n  };\n\n  addToScore = score => {\n    score++;\n    this.setState({\n      score: score\n    });\n  };\n\n  setTopScore = () => {\n    if (this.state.topScore < 12) {\n      if (this.state.score >= this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        });\n      }\n    } else if (this.state.topScore >= 12) {\n      this.setGameStart();\n    }\n  };\n\n  render() {\n    const { cards, score, topScore, status } = this.state;\n    return (\n      <div>\n        <Navbar score={score} topScore={topScore} status={status} />\n        <Jumbotron />\n        <CardGridContainer>\n          <CardGrid>\n            {cards.map(card => (\n              <Card\n                key={card.id}\n                card={card}\n                handleClick={this.handleItemClick}\n              />\n            ))}\n          </CardGrid>\n        </CardGridContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst CardGridContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst CardGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(4, 1fr);\n  grid-row-gap: 1rem;\n  @media (max-width: 700px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}